/*
Gaurav Nagarnaik
Extended Tic Tac Toe
*/


//Standard C++ Headers

#include<iostream>
#include<vector>
#include <time.h>
#include <fstream>


class TicTacToe{
public:
	bool Full(unsigned int &free);
	bool Apply(char player, int position, unsigned int &free, std::vector<char> &grid);
	bool Win(char player, unsigned int board_size, std::vector<char> &grid, unsigned win_count);
	void Display(unsigned int board_size, std::vector<char> &grid);
	int Turn(char player, unsigned int board_size, std::vector<char> &grid, unsigned int &free, unsigned int player_num);
	void newgame(unsigned board_size, unsigned numofplayers, unsigned win_count);
	void Resume();

	//Constructor
	TicTacToe();

private:
	char player;
	int position;
	int board_size;
	unsigned int player_num;
	int numofplayers;

};

//Constructor
TicTacToe::TicTacToe(){
	
	player = 0;
	position = 0;
	board_size = 3;
	player_num = 0;
	numofplayers = 0;

}

//Function to check if the board is full
bool TicTacToe::Full(unsigned int &free){
	return free == 0;

}

//This function reduces one place when a player is done with its turn and gives the number of left positions
bool TicTacToe::Apply(char player, int position, unsigned int &free, std::vector<char> &grid){

	if (grid[position] != ' ')
		return false;
	grid[position] = player;
	--free;
	return true;

}

//This functions check if there is a column/row/diagonal win
bool TicTacToe::Win(char player, unsigned int board_size, std::vector<char> &grid, unsigned win_count){

	bool rowwin = false;
	bool colwin = false;
	unsigned int row_win = 0;
	unsigned int col_win = 0;
	bool diagwin = false;
	bool win = false;
	unsigned int diag_win = 0;
	unsigned int count = 0;
	unsigned int k = 0;
	unsigned int j = 0;

	// check for row wins
	for (unsigned i = 0; i < board_size; ++i){

		for (unsigned j = 0; j < board_size; ++j) {
			
			if (grid[i * board_size + j] == player){
				
				row_win = row_win + 1;
				
				if (row_win == win_count){
					return true;
				
				}
			
			}
			
			else{
				row_win = 0;
			
			}
		
		}

	}

	// check for column wins
	for (unsigned i = 0; i < board_size; ++i){
		for (unsigned j = 0; j < board_size; ++j){
			
			if (grid[j * board_size + i] == player){
				col_win = col_win + 1;
				
				if (col_win == win_count){
					return true;
				
				}
			
			}
			
			else{
				col_win = 0;
			
			}
		
		}

	}

	// check for diagonal wins
	count = board_size;
	
	while (count>2){
		for (unsigned i = 0; i < count; ++i){
			if (grid[(i*board_size) + (i + k)] == player){
				diag_win = diag_win + 1;
				
				if (diag_win == win_count){
					return true;
				
				}
			
			}
			
			else{
				diag_win = 0;
			
			}
		
		}
		
		count = count - 1;
		k = k + 1;
	
	}

	diag_win = 0;
	count = board_size - 1;
	k = 0;
	j = 1;

	while (count > 2){
		for (unsigned i = j; i <= count; ++i){
			if (grid[(i * board_size) + k] == player){
				diag_win = diag_win + 1;
			
				if (diag_win == win_count){
					return true;
				
				}
			
			}
		
			else{
				diag_win = 0;
			
			}
			
			k = k + 1;
		
		}
		
		count = count - 1;
		j = j + 1;
		k = 0;

	}

	//check for opposite diagnal wins
	diag_win = 0;
	k = 0;
	count = board_size;
	while (count>2){
		for (unsigned i = 0; i < count; ++i){
			if (grid[i * board_size + (board_size - i - 1) + (k * board_size)] == player){
				
				diag_win = diag_win + 1;
				
				if (diag_win == win_count){
					return true;
				
				}
			
			}
			
			else{
				diag_win = 0;
			
			}
		
		}
		
		count = count - 1;
		k = k + 1;
	
	}

	diag_win = 0;
	k = 0;
	count = board_size;
	
	while (count > 2){
		for (unsigned i = 0; i < count; ++i){
			if (grid[i * board_size + (board_size - i - 1) - k] == player){
				diag_win = diag_win + 1;
				
				if (diag_win == win_count){
					return true;
				
				}
			
			}
			
			else{
				diag_win = 0;
			
			}
		
		}
		
		count = count - 1;
		k = k + 1;
	
	}

	return false;

}

//Creating a onscreen board
void TicTacToe::Display(unsigned int board_size, std::vector<char> &grid){
	std::cout << ' ';
	for (unsigned i = 1; i <= board_size; ++i){
		
		if (i > 9){
			std::cout << "  " << i;
		
		}
		
		else{
			std::cout << "   " << i;
		
		}
	
	}
	
	std::cout << "\n";
	for (unsigned i = 0; i < board_size; i++){
		if (i > 0){
			std::cout << "\n";
			std::cout << "   ";
			for (unsigned j = 0; j < board_size; j++){
				if (j == board_size - 1){
					std::cout << "---";
				
				}
				else{
					std::cout << "---+";
				
				}
			
			}
			std::cout << "\n";
		
		}
		std::cout << " " << i + 1 << " ";

		for (unsigned j = 0; j < board_size; j++){
			std::cout << " " << grid[i * board_size + j];

			if (j < board_size - 1 && i < board_size - 1){
				if (i > 8 && j == 0){
					std::cout << "|";
				
				}
				
				else{
					std::cout << " |";
				
				}
			
			}
			
			else if (j < board_size - 1 && i == board_size - 1){
				if (i > 8 && j == 0){
					std::cout << "|";
				
				}
				
				else{
					std::cout << " |";
				
				}
			
			}
		
		}

	}
	
	std::cout << "\n\n";

}


// Function for the turn of Players/ check if the positions provided by players are valid or not already used
int TicTacToe::Turn(char player, unsigned int board_size, std::vector<char> &grid, unsigned int &free, unsigned int player_num){
	int row = 0;
	int column = 0;
	unsigned position = 0;
	unsigned col_num;
	bool applied = false;
	char value;
	std::string str_row;
	std::string str_column;

	std::cout << "\nPlayer " << player_num << "(" << player << ") turn. Please provide the row and column \n";

	while (!applied) {

		str_row = "";
		str_column = "";
		std::cout << "row: ";

		do{

			std::cin.get(value);
			if (value != (int)'\n')
				str_row = str_row + value;
		
		} while (value != (int)'\n');

		row = atoi(str_row.c_str());


		std::cout << "column: ";

		do{
			std::cin.get(value);
			if (value != (int)'\n')
				str_column = str_column + value;
		
		} while (value != (int)'\n');

		column = atoi(str_column.c_str());

		col_num = column;
		position = board_size*(row - 1) + (column - 1);
		if (position < grid.size() && col_num <= board_size){
			applied = Apply(player, position, free, grid);
			if (!applied)
				std::cout << "Already Used. Try Again." << std::endl;
		
		}
		
		else {
			std::cout << "Invalid position.  Try again." << std::endl;
		
		}
	
	}
	
	std::cout << "\n\n";
	return position;

}

//function for a new game
void TicTacToe::newgame(unsigned board_size, unsigned numofplayers, unsigned win_count){
	const char players[26] = { 'X', 'O', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'Y', 'Z' };
	unsigned int player_num;
	int player = 1;
	unsigned free;
	free = board_size*board_size;
	std::vector<char>grid(free, ' ');
	bool win = false;
	bool full = false;
	unsigned int i;
	clock_t start;
	double end_time;
	int position;
	std::ofstream myfile;
	std::string quit="";
	char value;

	myfile.open("input.txt", std::ios::trunc);
	myfile << board_size << " " << numofplayers << " " << win_count << ";" << std::endl; // writing board dimensions/number of players/winning sequence incase to reload the game

	while (!win && !full){
		for (i = 0; i < numofplayers; i++){

			player = i;
			player_num = i + 1;
			Display(board_size, grid);

			do{
				if (quit != ""){
					std::cout << "Invalid input. Please try again.\n";
					quit = "";
				
				}
				
				std::cout << "save & exit(y/n): ";
				do{
					std::cin.get(value);
					if (value != (int)'\n')
						quit = (char)value;
				
				} while (value != (int)'\n');
			
			} while (quit != "y" && quit != "n");

			if (quit == "y"){
				return;
			
			}
			
			quit = "";
			start = clock();
			position = Turn(players[player], board_size, grid, free, player_num);
			end_time = (clock() - start) / static_cast<double>(CLOCKS_PER_SEC);
			if (myfile.is_open()){
				myfile << position << " " << player_num << " " << end_time << ";" << std::endl; // writing position/player turn/time taken by player to reload the game in teh same sequence
			
			}
			
			win = Win(players[player], board_size, grid, win_count);
			full = Full(free);
			
			if (win){
				Display(board_size, grid);
				std::cout << "\nPlayer " << player_num << "(" << players[player] << ") is the Winner!\n";
				myfile.close();
				myfile.open("input.txt", std::ios::trunc);
				myfile.close();
				break;
			
			}
			
			else if (full) {
				Display(board_size, grid);
				std::cout << "\nTie game!\n";
				myfile.close();
				myfile.open("input.txt", std::ios::trunc);
				myfile.close();
				break;
			
			}
			
			if (i == numofplayers - 1){
				i = -1;
			
			}

		}

	}

}


//Resume function to load the saved game and continue it in the same time that passed between moves 
//and actually replay the game at the same speed that it was originally played.
void TicTacToe::Resume(){
	std::ofstream myfile;
	char file_out;
	std::string output;
	std::string output_line;
	unsigned free;
	int position;
	double time = 0;
	bool win = false;
	bool full = false;
	int start_player = 0;
	const char players[26] = { 'X', 'O', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'Y', 'Z' };
	unsigned int pos0, pos1, pos2;
	std::ifstream myfile_read;
	clock_t start, delay_start;
	double end_time;
	int player = 1;
	int i;
	int count = 0;
	char value;
	std::string quit="";
	std::string ignore_line;
	int win_count;

	myfile_read.open("input.txt");
	if (myfile_read.is_open()){
		while (!myfile_read.eof()){
			file_out = (char)myfile_read.get();
			output = output + file_out;
		
		}
	
	}


	if (output.length() < 6){
		std::cout << "There is no saved game. Please try a new game.\n";
		return;
	
	}
	
	myfile_read.close();
	pos2 = output.find(' ', 0);
	board_size = atoi((output.substr(0, pos2 + 1).c_str()));
	pos1 = output.find(' ', pos2 + 1);
	numofplayers = atoi((output.substr(pos2 + 1, pos1 + 1).c_str()));
	pos0 = output.find(';', pos1 + 1);
	win_count = atoi((output.substr(pos1 + 1, pos0).c_str()));
	output.erase(0, pos0 + 2);
	output.erase(output.length() - 1);
	free = board_size * board_size;

	myfile.open("input.txt", std::ios::out | std::ios::app);

	if (output.empty()){
		newgame(board_size, numofplayers, win_count);
	
	}

	std::vector<char>grid(free, ' ');

	while (!output.empty()){

		pos2 = output.find(';', 0);
		output_line = output.substr(0, pos2 + 1);


		pos0 = output_line.find(' ', 0);
		position = atoi((output_line.substr(0, pos0)).c_str());
		pos1 = output_line.find(' ', pos0 + 1);
		player_num = atoi(output_line.substr(pos0 + 1, pos1 - pos0 - 1).c_str());
		time = atof((output_line.substr(pos1 + 1, output_line.length() - pos1 - 2).c_str()));
		delay_start = clock();

		while (!win && !full){
			if (player_num == numofplayers){
				start_player = 0;
			
			}
			
			else{
				start_player = player_num;
			
			}

			for (i = start_player; i < numofplayers; i++){
				std::cout << "\nPlease wait while loading previous game...\n" << std::endl;
				Display(board_size, grid);

				if (output.empty() == true){

					do{
						if (quit != ""){
							std::cout << "Invalid input. Please try again.\n";
							quit = "";
						
						}
						
						std::cout << "save & exit(y/n): ";
						do{
							std::cin.get(value);
							if (value != (int)'\n')
								quit = (char)value;
						
						} while (value != (int)'\n');
					
					} while (quit != "y" && quit != "n");

					if (quit == "y"){
						myfile.close();
						return;
					
					}
					
					quit = "";
					player = i;
					player_num = i + 1;
					start = clock();
					position = Turn(players[player], board_size, grid, free, player_num);
					end_time = (clock() - start) / static_cast<double>(CLOCKS_PER_SEC);
					if (myfile.is_open()){
						myfile << position << " " << player_num << " " << end_time << ";" << std::endl;
					
					}
					
					win = Win(players[player], board_size, grid, win_count);
					full = Full(free);
					
					if (win){
						Display(board_size, grid);
						std::cout << "\nPlayer " << player_num << "(" << players[player] << ") is the Winner!\n";
						myfile.close();
						myfile.open("input.txt", std::ios::trunc);
						myfile.close();
						return;
					
					}
					
					else if (full) {
						Display(board_size, grid);
						std::cout << "\nTie game!\n";
						myfile.close();
						myfile.open("input.txt", std::ios::trunc);
						myfile.close();
						return;
					
					}

				}
				
				else{
					while ((clock() - delay_start) / static_cast<double>(CLOCKS_PER_SEC) < time){
						//do nothing
					
					}
					
					Apply(players[player_num - 1], position, free, grid);
					output.erase(0, pos2 + 2);
					break;
				
				}

			}

			if (!output.empty()){
				break;
			
			}

		}
	
	}

}


// Main function with the implementation
int main()
{
	//Declarations
	TicTacToe T3;
	unsigned board_size;
	std::string str_numofplayers;
	std::string str_board_size;
	std::string str_wincount;
	int numofplayers;
	std::string new_game;
	char value, value1, value2, value3;
	int win_count;

	do{
		if (new_game != ""){
			std::cout << "Invalid input. Please try again.\n";
			new_game = "";
		
		}
		
		std::cout << "Do you want to resume a saved game (s) or new game (n): ";
		do{
			std::cin.get(value);
			if (value != (int)'\n')
				new_game = (char)value;
		
		} while (value != (int)'\n');
	
	} while (new_game != "s" && new_game != "n");

	if (new_game == "n"){
		//conditions to check the board dimensions
		do{
			if (str_board_size != ""){
				std::cout << "Board size is not valid. it has to be between 3 to 1000. Please try again.\n";
				str_board_size = "";
			
			}

			std::cout << "Enter the size of board: ";
			do{

				std::cin.get(value2);
				if (value2 != (int)'\n')
					str_board_size = str_board_size + value2;
			
			} while (value2 != (int)'\n');
		
		} while (atoi(str_board_size.c_str())<3 || atoi(str_board_size.c_str())>1000);

		board_size = atoi(str_board_size.c_str());

		//conditions to check the number of players
		do{
			if (str_numofplayers != ""){
				std::cout << "Number of players cannot exceed " << board_size + 1 << " and must be greater than or equal to 2. try again.\n";
				str_numofplayers = "";
			
			}

			std::cout << "Enter the number of players: ";
			do{

				std::cin.get(value1);
				if (value1 != (int)'\n')
					str_numofplayers = str_numofplayers + value1;
			
			} while (value1 != (int)'\n');
		
		} while (atoi(str_numofplayers.c_str()) < 2 || atoi(str_numofplayers.c_str()) > (board_size + 1));

		numofplayers = atoi(str_numofplayers.c_str());

		//conditions to check the winning sequence
		do{
			if (str_wincount != ""){
				std::cout << "Winning sequence cannot exceed " << board_size << " and must be greater than 2. try again.\n";
				str_wincount = "";
		
			}

			std::cout << "Enter the winning count: ";
			do{

				std::cin.get(value3);
				if (value3 != (int)'\n')
					str_wincount = str_wincount + value3;
			
			} while (value3 != (int)'\n');
		
		} while (atoi(str_wincount.c_str()) < 3 || atoi(str_wincount.c_str()) > board_size);
		
		win_count = atoi(str_wincount.c_str());
		
		T3.newgame(board_size, numofplayers, win_count);
	
	}
	
	else{
		T3.Resume();
	
	}

	//Press any key to continue...
	system("Pause");
	//Return 0 indicates no zero
	return 0;

}
